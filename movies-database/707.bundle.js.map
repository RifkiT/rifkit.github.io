{"version":3,"file":"707.bundle.js","mappings":"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","sources":["webpack://movies-detail-app/./node_modules/autoprefixer/lib/info.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/old-selector.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/old-value.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/prefixer.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/prefixes.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/processor.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/resolution.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/selector.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/supports.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/transition.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/utils.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/value.js","webpack://movies-detail-app/./node_modules/autoprefixer/lib/vendor.js"],"sourcesContent":["let browserslist = require('browserslist')\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android',\n  and_qq: 'QQ Browser',\n  kaios: 'KaiOS Browser',\n  baidu: 'Baidu Browser',\n  samsung: 'Samsung Internet'\n}\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`\n  if (note) out += ' *'\n  out += ': '\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ')\n  out += '\\n'\n  return out\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected'\n  }\n\n  let versions = {}\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ')\n    let name = parts[0]\n    let version = parts[1]\n\n    name = NAMES[name] || capitalize(name)\n    if (versions[name]) {\n      versions[name].push(version)\n    } else {\n      versions[name] = [version]\n    }\n  }\n\n  let out = 'Browsers:\\n'\n  for (let browser in versions) {\n    let list = versions[browser]\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a))\n    out += `  ${browser}: ${list.join(', ')}\\n`\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected)\n  let round = Math.round(coverage * 100) / 100.0\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`\n\n  let atrules = []\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes))\n    }\n  }\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`\n  }\n\n  let selectors = []\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes))\n    }\n  }\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`\n  }\n\n  let values = []\n  let props = []\n  let hadGrid = false\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0\n      if (grid) hadGrid = true\n      props.push(prefix(name, data.prefixes, grid))\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid')\n      if (grid) hadGrid = true\n      let string = prefix(value.name, value.prefixes, grid)\n      if (!values.includes(string)) {\n        values.push(string)\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`\n  }\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n'\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out +=\n      \"\\nAwesome! Your browsers don't require any vendor prefixes.\" +\n      '\\nNow you can remove Autoprefixer from build steps.'\n  }\n\n  return out\n}\n","class OldSelector {\n  constructor(selector, prefix) {\n    this.prefix = prefix\n    this.prefixed = selector.prefixed(this.prefix)\n    this.regexp = selector.regexp(this.prefix)\n\n    this.prefixeds = selector\n      .possible()\n      .map(x => [selector.prefixed(x), selector.regexp(x)])\n\n    this.unprefixed = selector.name\n    this.nameRegexp = selector.regexp()\n  }\n\n  /**\n   * Is rule a hack without unprefixed version bottom\n   */\n  isHack(rule) {\n    let index = rule.parent.index(rule) + 1\n    let rules = rule.parent.nodes\n\n    while (index < rules.length) {\n      let before = rules[index].selector\n      if (!before) {\n        return true\n      }\n\n      if (before.includes(this.unprefixed) && before.match(this.nameRegexp)) {\n        return false\n      }\n\n      let some = false\n      for (let [string, regexp] of this.prefixeds) {\n        if (before.includes(string) && before.match(regexp)) {\n          some = true\n          break\n        }\n      }\n\n      if (!some) {\n        return true\n      }\n\n      index += 1\n    }\n\n    return true\n  }\n\n  /**\n   * Does rule contain an unnecessary prefixed selector\n   */\n  check(rule) {\n    if (!rule.selector.includes(this.prefixed)) {\n      return false\n    }\n    if (!rule.selector.match(this.regexp)) {\n      return false\n    }\n    if (this.isHack(rule)) {\n      return false\n    }\n    return true\n  }\n}\n\nmodule.exports = OldSelector\n","let utils = require('./utils')\n\nclass OldValue {\n  constructor(unprefixed, prefixed, string, regexp) {\n    this.unprefixed = unprefixed\n    this.prefixed = prefixed\n    this.string = string || prefixed\n    this.regexp = regexp || utils.regexp(prefixed)\n  }\n\n  /**\n   * Check, that value contain old value\n   */\n  check(value) {\n    if (value.includes(this.string)) {\n      return !!value.match(this.regexp)\n    }\n    return false\n  }\n}\n\nmodule.exports = OldValue\n","let Browsers = require('./browsers')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\n/**\n * Recursively clone objects\n */\nfunction clone(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i of Object.keys(obj || {})) {\n    let value = obj[i]\n    if (i === 'parent' && typeof value === 'object') {\n      if (parent) {\n        cloned[i] = parent\n      }\n    } else if (i === 'source' || i === null) {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(x => clone(x, cloned))\n    } else if (\n      i !== '_autoprefixerPrefix' &&\n      i !== '_autoprefixerValues' &&\n      i !== 'proxyCache'\n    ) {\n      if (typeof value === 'object' && value !== null) {\n        value = clone(value, cloned)\n      }\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Prefixer {\n  /**\n   * Add hack to selected names\n   */\n  static hack(klass) {\n    if (!this.hacks) {\n      this.hacks = {}\n    }\n    return klass.names.map(name => {\n      this.hacks[name] = klass\n      return this.hacks[name]\n    })\n  }\n\n  /**\n   * Load hacks for some names\n   */\n  static load(name, prefixes, all) {\n    let Klass = this.hacks && this.hacks[name]\n    if (Klass) {\n      return new Klass(name, prefixes, all)\n    } else {\n      return new this(name, prefixes, all)\n    }\n  }\n\n  /**\n   * Clone node and clean autprefixer custom caches\n   */\n  static clone(node, overrides) {\n    let cloned = clone(node)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  constructor(name, prefixes, all) {\n    this.prefixes = prefixes\n    this.name = name\n    this.all = all\n  }\n\n  /**\n   * Find prefix in node parents\n   */\n  parentPrefix(node) {\n    let prefix\n\n    if (typeof node._autoprefixerPrefix !== 'undefined') {\n      prefix = node._autoprefixerPrefix\n    } else if (node.type === 'decl' && node.prop[0] === '-') {\n      prefix = vendor.prefix(node.prop)\n    } else if (node.type === 'root') {\n      prefix = false\n    } else if (\n      node.type === 'rule' &&\n      node.selector.includes(':-') &&\n      /:(-\\w+-)/.test(node.selector)\n    ) {\n      prefix = node.selector.match(/:(-\\w+-)/)[1]\n    } else if (node.type === 'atrule' && node.name[0] === '-') {\n      prefix = vendor.prefix(node.name)\n    } else {\n      prefix = this.parentPrefix(node.parent)\n    }\n\n    if (!Browsers.prefixes().includes(prefix)) {\n      prefix = false\n    }\n\n    node._autoprefixerPrefix = prefix\n\n    return node._autoprefixerPrefix\n  }\n\n  /**\n   * Clone node with prefixes\n   */\n  process(node, result) {\n    if (!this.check(node)) {\n      return undefined\n    }\n\n    let parent = this.parentPrefix(node)\n\n    let prefixes = this.prefixes.filter(\n      prefix => !parent || parent === utils.removeNote(prefix)\n    )\n\n    let added = []\n    for (let prefix of prefixes) {\n      if (this.add(node, prefix, added.concat([prefix]), result)) {\n        added.push(prefix)\n      }\n    }\n\n    return added\n  }\n\n  /**\n   * Shortcut for Prefixer.clone\n   */\n  clone(node, overrides) {\n    return Prefixer.clone(node, overrides)\n  }\n}\n\nmodule.exports = Prefixer\n","let vendor = require('./vendor')\nlet Declaration = require('./declaration')\nlet Resolution = require('./resolution')\nlet Transition = require('./transition')\nlet Processor = require('./processor')\nlet Supports = require('./supports')\nlet Browsers = require('./browsers')\nlet Selector = require('./selector')\nlet AtRule = require('./at-rule')\nlet Value = require('./value')\nlet utils = require('./utils')\nlet hackFullscreen = require('./hacks/fullscreen')\nlet hackPlaceholder = require('./hacks/placeholder')\nlet hackPlaceholderShown = require('./hacks/placeholder-shown')\nlet hackFileSelectorButton = require('./hacks/file-selector-button')\nlet hackFlex = require('./hacks/flex')\nlet hackOrder = require('./hacks/order')\nlet hackFilter = require('./hacks/filter')\nlet hackGridEnd = require('./hacks/grid-end')\nlet hackAnimation = require('./hacks/animation')\nlet hackFlexFlow = require('./hacks/flex-flow')\nlet hackFlexGrow = require('./hacks/flex-grow')\nlet hackFlexWrap = require('./hacks/flex-wrap')\nlet hackGridArea = require('./hacks/grid-area')\nlet hackPlaceSelf = require('./hacks/place-self')\nlet hackGridStart = require('./hacks/grid-start')\nlet hackAlignSelf = require('./hacks/align-self')\nlet hackAppearance = require('./hacks/appearance')\nlet hackFlexBasis = require('./hacks/flex-basis')\nlet hackMaskBorder = require('./hacks/mask-border')\nlet hackMaskComposite = require('./hacks/mask-composite')\nlet hackAlignItems = require('./hacks/align-items')\nlet hackUserSelect = require('./hacks/user-select')\nlet hackFlexShrink = require('./hacks/flex-shrink')\nlet hackBreakProps = require('./hacks/break-props')\nlet hackWritingMode = require('./hacks/writing-mode')\nlet hackBorderImage = require('./hacks/border-image')\nlet hackAlignContent = require('./hacks/align-content')\nlet hackBorderRadius = require('./hacks/border-radius')\nlet hackBlockLogical = require('./hacks/block-logical')\nlet hackGridTemplate = require('./hacks/grid-template')\nlet hackInlineLogical = require('./hacks/inline-logical')\nlet hackGridRowAlign = require('./hacks/grid-row-align')\nlet hackTransformDecl = require('./hacks/transform-decl')\nlet hackFlexDirection = require('./hacks/flex-direction')\nlet hackImageRendering = require('./hacks/image-rendering')\nlet hackBackdropFilter = require('./hacks/backdrop-filter')\nlet hackBackgroundClip = require('./hacks/background-clip')\nlet hackTextDecoration = require('./hacks/text-decoration')\nlet hackJustifyContent = require('./hacks/justify-content')\nlet hackBackgroundSize = require('./hacks/background-size')\nlet hackGridRowColumn = require('./hacks/grid-row-column')\nlet hackGridRowsColumns = require('./hacks/grid-rows-columns')\nlet hackGridColumnAlign = require('./hacks/grid-column-align')\nlet hackPrintColorAdjust = require('./hacks/print-color-adjust')\nlet hackOverscrollBehavior = require('./hacks/overscroll-behavior')\nlet hackGridTemplateAreas = require('./hacks/grid-template-areas')\nlet hackTextEmphasisPosition = require('./hacks/text-emphasis-position')\nlet hackTextDecorationSkipInk = require('./hacks/text-decoration-skip-ink')\nlet hackGradient = require('./hacks/gradient')\nlet hackIntrinsic = require('./hacks/intrinsic')\nlet hackPixelated = require('./hacks/pixelated')\nlet hackImageSet = require('./hacks/image-set')\nlet hackCrossFade = require('./hacks/cross-fade')\nlet hackDisplayFlex = require('./hacks/display-flex')\nlet hackDisplayGrid = require('./hacks/display-grid')\nlet hackFilterValue = require('./hacks/filter-value')\nlet hackAutofill = require('./hacks/autofill')\n\nSelector.hack(hackAutofill)\nSelector.hack(hackFullscreen)\nSelector.hack(hackPlaceholder)\nSelector.hack(hackPlaceholderShown)\nSelector.hack(hackFileSelectorButton)\nDeclaration.hack(hackFlex)\nDeclaration.hack(hackOrder)\nDeclaration.hack(hackFilter)\nDeclaration.hack(hackGridEnd)\nDeclaration.hack(hackAnimation)\nDeclaration.hack(hackFlexFlow)\nDeclaration.hack(hackFlexGrow)\nDeclaration.hack(hackFlexWrap)\nDeclaration.hack(hackGridArea)\nDeclaration.hack(hackPlaceSelf)\nDeclaration.hack(hackGridStart)\nDeclaration.hack(hackAlignSelf)\nDeclaration.hack(hackAppearance)\nDeclaration.hack(hackFlexBasis)\nDeclaration.hack(hackMaskBorder)\nDeclaration.hack(hackMaskComposite)\nDeclaration.hack(hackAlignItems)\nDeclaration.hack(hackUserSelect)\nDeclaration.hack(hackFlexShrink)\nDeclaration.hack(hackBreakProps)\nDeclaration.hack(hackWritingMode)\nDeclaration.hack(hackBorderImage)\nDeclaration.hack(hackAlignContent)\nDeclaration.hack(hackBorderRadius)\nDeclaration.hack(hackBlockLogical)\nDeclaration.hack(hackGridTemplate)\nDeclaration.hack(hackInlineLogical)\nDeclaration.hack(hackGridRowAlign)\nDeclaration.hack(hackTransformDecl)\nDeclaration.hack(hackFlexDirection)\nDeclaration.hack(hackImageRendering)\nDeclaration.hack(hackBackdropFilter)\nDeclaration.hack(hackBackgroundClip)\nDeclaration.hack(hackTextDecoration)\nDeclaration.hack(hackJustifyContent)\nDeclaration.hack(hackBackgroundSize)\nDeclaration.hack(hackGridRowColumn)\nDeclaration.hack(hackGridRowsColumns)\nDeclaration.hack(hackGridColumnAlign)\nDeclaration.hack(hackOverscrollBehavior)\nDeclaration.hack(hackGridTemplateAreas)\nDeclaration.hack(hackPrintColorAdjust)\nDeclaration.hack(hackTextEmphasisPosition)\nDeclaration.hack(hackTextDecorationSkipInk)\nValue.hack(hackGradient)\nValue.hack(hackIntrinsic)\nValue.hack(hackPixelated)\nValue.hack(hackImageSet)\nValue.hack(hackCrossFade)\nValue.hack(hackDisplayFlex)\nValue.hack(hackDisplayGrid)\nValue.hack(hackFilterValue)\n\nlet declsCache = new Map()\n\nclass Prefixes {\n  constructor(data, browsers, options = {}) {\n    this.data = data\n    this.browsers = browsers\n    this.options = options\n    ;[this.add, this.remove] = this.preprocess(this.select(this.data))\n    this.transition = new Transition(this)\n    this.processor = new Processor(this)\n  }\n\n  /**\n   * Return clone instance to remove all prefixes\n   */\n  cleaner() {\n    if (this.cleanerCache) {\n      return this.cleanerCache\n    }\n\n    if (this.browsers.selected.length) {\n      let empty = new Browsers(this.browsers.data, [])\n      this.cleanerCache = new Prefixes(this.data, empty, this.options)\n    } else {\n      return this\n    }\n\n    return this.cleanerCache\n  }\n\n  /**\n   * Select prefixes from data, which is necessary for selected browsers\n   */\n  select(list) {\n    let selected = { add: {}, remove: {} }\n\n    for (let name in list) {\n      let data = list[name]\n      let add = data.browsers.map(i => {\n        let params = i.split(' ')\n        return {\n          browser: `${params[0]} ${params[1]}`,\n          note: params[2]\n        }\n      })\n\n      let notes = add\n        .filter(i => i.note)\n        .map(i => `${this.browsers.prefix(i.browser)} ${i.note}`)\n      notes = utils.uniq(notes)\n\n      add = add\n        .filter(i => this.browsers.isSelected(i.browser))\n        .map(i => {\n          let prefix = this.browsers.prefix(i.browser)\n          if (i.note) {\n            return `${prefix} ${i.note}`\n          } else {\n            return prefix\n          }\n        })\n      add = this.sort(utils.uniq(add))\n\n      if (this.options.flexbox === 'no-2009') {\n        add = add.filter(i => !i.includes('2009'))\n      }\n\n      let all = data.browsers.map(i => this.browsers.prefix(i))\n      if (data.mistakes) {\n        all = all.concat(data.mistakes)\n      }\n      all = all.concat(notes)\n      all = utils.uniq(all)\n\n      if (add.length) {\n        selected.add[name] = add\n        if (add.length < all.length) {\n          selected.remove[name] = all.filter(i => !add.includes(i))\n        }\n      } else {\n        selected.remove[name] = all\n      }\n    }\n\n    return selected\n  }\n\n  /**\n   * Sort vendor prefixes\n   */\n  sort(prefixes) {\n    return prefixes.sort((a, b) => {\n      let aLength = utils.removeNote(a).length\n      let bLength = utils.removeNote(b).length\n\n      if (aLength === bLength) {\n        return b.length - a.length\n      } else {\n        return bLength - aLength\n      }\n    })\n  }\n\n  /**\n   * Cache prefixes data to fast CSS processing\n   */\n  preprocess(selected) {\n    let add = {\n      'selectors': [],\n      '@supports': new Supports(Prefixes, this)\n    }\n    for (let name in selected.add) {\n      let prefixes = selected.add[name]\n      if (name === '@keyframes' || name === '@viewport') {\n        add[name] = new AtRule(name, prefixes, this)\n      } else if (name === '@resolution') {\n        add[name] = new Resolution(name, prefixes, this)\n      } else if (this.data[name].selector) {\n        add.selectors.push(Selector.load(name, prefixes, this))\n      } else {\n        let props = this.data[name].props\n\n        if (props) {\n          let value = Value.load(name, prefixes, this)\n          for (let prop of props) {\n            if (!add[prop]) {\n              add[prop] = { values: [] }\n            }\n            add[prop].values.push(value)\n          }\n        } else {\n          let values = (add[name] && add[name].values) || []\n          add[name] = Declaration.load(name, prefixes, this)\n          add[name].values = values\n        }\n      }\n    }\n\n    let remove = { selectors: [] }\n    for (let name in selected.remove) {\n      let prefixes = selected.remove[name]\n      if (this.data[name].selector) {\n        let selector = Selector.load(name, prefixes)\n        for (let prefix of prefixes) {\n          remove.selectors.push(selector.old(prefix))\n        }\n      } else if (name === '@keyframes' || name === '@viewport') {\n        for (let prefix of prefixes) {\n          let prefixed = `@${prefix}${name.slice(1)}`\n          remove[prefixed] = { remove: true }\n        }\n      } else if (name === '@resolution') {\n        remove[name] = new Resolution(name, prefixes, this)\n      } else {\n        let props = this.data[name].props\n        if (props) {\n          let value = Value.load(name, [], this)\n          for (let prefix of prefixes) {\n            let old = value.old(prefix)\n            if (old) {\n              for (let prop of props) {\n                if (!remove[prop]) {\n                  remove[prop] = {}\n                }\n                if (!remove[prop].values) {\n                  remove[prop].values = []\n                }\n                remove[prop].values.push(old)\n              }\n            }\n          }\n        } else {\n          for (let p of prefixes) {\n            let olds = this.decl(name).old(name, p)\n            if (name === 'align-self') {\n              let a = add[name] && add[name].prefixes\n              if (a) {\n                if (p === '-webkit- 2009' && a.includes('-webkit-')) {\n                  continue\n                } else if (p === '-webkit-' && a.includes('-webkit- 2009')) {\n                  continue\n                }\n              }\n            }\n            for (let prefixed of olds) {\n              if (!remove[prefixed]) {\n                remove[prefixed] = {}\n              }\n              remove[prefixed].remove = true\n            }\n          }\n        }\n      }\n    }\n\n    return [add, remove]\n  }\n\n  /**\n   * Declaration loader with caching\n   */\n  decl(prop) {\n    if (!declsCache.has(prop)) {\n      declsCache.set(prop, Declaration.load(prop))\n    }\n\n    return declsCache.get(prop)\n  }\n\n  /**\n   * Return unprefixed version of property\n   */\n  unprefixed(prop) {\n    let value = this.normalize(vendor.unprefixed(prop))\n    if (value === 'flex-direction') {\n      value = 'flex-flow'\n    }\n    return value\n  }\n\n  /**\n   * Normalize prefix for remover\n   */\n  normalize(prop) {\n    return this.decl(prop).normalize(prop)\n  }\n\n  /**\n   * Return prefixed version of property\n   */\n  prefixed(prop, prefix) {\n    prop = vendor.unprefixed(prop)\n    return this.decl(prop).prefixed(prop, prefix)\n  }\n\n  /**\n   * Return values, which must be prefixed in selected property\n   */\n  values(type, prop) {\n    let data = this[type]\n\n    let global = data['*'] && data['*'].values\n    let values = data[prop] && data[prop].values\n\n    if (global && values) {\n      return utils.uniq(global.concat(values))\n    } else {\n      return global || values || []\n    }\n  }\n\n  /**\n   * Group declaration by unprefixed property to check them\n   */\n  group(decl) {\n    let rule = decl.parent\n    let index = rule.index(decl)\n    let { length } = rule.nodes\n    let unprefixed = this.unprefixed(decl.prop)\n\n    let checker = (step, callback) => {\n      index += step\n      while (index >= 0 && index < length) {\n        let other = rule.nodes[index]\n        if (other.type === 'decl') {\n          if (step === -1 && other.prop === unprefixed) {\n            if (!Browsers.withPrefix(other.value)) {\n              break\n            }\n          }\n\n          if (this.unprefixed(other.prop) !== unprefixed) {\n            break\n          } else if (callback(other) === true) {\n            return true\n          }\n\n          if (step === +1 && other.prop === unprefixed) {\n            if (!Browsers.withPrefix(other.value)) {\n              break\n            }\n          }\n        }\n\n        index += step\n      }\n      return false\n    }\n\n    return {\n      up(callback) {\n        return checker(-1, callback)\n      },\n      down(callback) {\n        return checker(+1, callback)\n      }\n    }\n  }\n}\n\nmodule.exports = Prefixes\n","let parser = require('postcss-value-parser')\n\nlet Value = require('./value')\nlet insertAreas = require('./hacks/grid-utils').insertAreas\n\nconst OLD_LINEAR = /(^|[^-])linear-gradient\\(\\s*(top|left|right|bottom)/i\nconst OLD_RADIAL = /(^|[^-])radial-gradient\\(\\s*\\d+(\\w*|%)\\s+\\d+(\\w*|%)\\s*,/i\nconst IGNORE_NEXT = /(!\\s*)?autoprefixer:\\s*ignore\\s+next/i\nconst GRID_REGEX = /(!\\s*)?autoprefixer\\s*grid:\\s*(on|off|(no-)?autoplace)/i\n\nconst SIZES = [\n  'width',\n  'height',\n  'min-width',\n  'max-width',\n  'min-height',\n  'max-height',\n  'inline-size',\n  'min-inline-size',\n  'max-inline-size',\n  'block-size',\n  'min-block-size',\n  'max-block-size'\n]\n\nfunction hasGridTemplate(decl) {\n  return decl.parent.some(\n    i => i.prop === 'grid-template' || i.prop === 'grid-template-areas'\n  )\n}\n\nfunction hasRowsAndColumns(decl) {\n  let hasRows = decl.parent.some(i => i.prop === 'grid-template-rows')\n  let hasColumns = decl.parent.some(i => i.prop === 'grid-template-columns')\n  return hasRows && hasColumns\n}\n\nclass Processor {\n  constructor(prefixes) {\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Add necessary prefixes\n   */\n  add(css, result) {\n    // At-rules\n    let resolution = this.prefixes.add['@resolution']\n    let keyframes = this.prefixes.add['@keyframes']\n    let viewport = this.prefixes.add['@viewport']\n    let supports = this.prefixes.add['@supports']\n\n    css.walkAtRules(rule => {\n      if (rule.name === 'keyframes') {\n        if (!this.disabled(rule, result)) {\n          return keyframes && keyframes.process(rule)\n        }\n      } else if (rule.name === 'viewport') {\n        if (!this.disabled(rule, result)) {\n          return viewport && viewport.process(rule)\n        }\n      } else if (rule.name === 'supports') {\n        if (\n          this.prefixes.options.supports !== false &&\n          !this.disabled(rule, result)\n        ) {\n          return supports.process(rule)\n        }\n      } else if (rule.name === 'media' && rule.params.includes('-resolution')) {\n        if (!this.disabled(rule, result)) {\n          return resolution && resolution.process(rule)\n        }\n      }\n\n      return undefined\n    })\n\n    // Selectors\n    css.walkRules(rule => {\n      if (this.disabled(rule, result)) return undefined\n\n      return this.prefixes.add.selectors.map(selector => {\n        return selector.process(rule, result)\n      })\n    })\n\n    function insideGrid(decl) {\n      return decl.parent.nodes.some(node => {\n        if (node.type !== 'decl') return false\n        let displayGrid =\n          node.prop === 'display' && /(inline-)?grid/.test(node.value)\n        let gridTemplate = node.prop.startsWith('grid-template')\n        let gridGap = /^grid-([A-z]+-)?gap/.test(node.prop)\n        return displayGrid || gridTemplate || gridGap\n      })\n    }\n    function insideFlex(decl) {\n      return decl.parent.some(node => {\n        return node.prop === 'display' && /(inline-)?flex/.test(node.value)\n      })\n    }\n\n    let gridPrefixes =\n      this.gridStatus(css, result) &&\n      this.prefixes.add['grid-area'] &&\n      this.prefixes.add['grid-area'].prefixes\n\n    css.walkDecls(decl => {\n      if (this.disabledDecl(decl, result)) return undefined\n\n      let parent = decl.parent\n      let prop = decl.prop\n      let value = decl.value\n\n      if (prop === 'color-adjust') {\n        if (parent.every(i => i.prop !== 'print-color-adjust')) {\n          result.warn(\n            'Replace color-adjust to print-color-adjust. ' +\n              'The color-adjust shorthand is currently deprecated.',\n            { node: decl }\n          )\n        }\n      } else if (prop === 'grid-row-span') {\n        result.warn(\n          'grid-row-span is not part of final Grid Layout. Use grid-row.',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'grid-column-span') {\n        result.warn(\n          'grid-column-span is not part of final Grid Layout. Use grid-column.',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'display' && value === 'box') {\n        result.warn(\n          'You should write display: flex by final spec ' +\n            'instead of display: box',\n          { node: decl }\n        )\n        return undefined\n      } else if (prop === 'text-emphasis-position') {\n        if (value === 'under' || value === 'over') {\n          result.warn(\n            'You should use 2 values for text-emphasis-position ' +\n              'For example, `under left` instead of just `under`.',\n            { node: decl }\n          )\n        }\n      } else if (\n        /^(align|justify|place)-(items|content)$/.test(prop) &&\n        insideFlex(decl)\n      ) {\n        if (value === 'start' || value === 'end') {\n          result.warn(\n            `${value} value has mixed support, consider using ` +\n              `flex-${value} instead`,\n            { node: decl }\n          )\n        }\n      } else if (prop === 'text-decoration-skip' && value === 'ink') {\n        result.warn(\n          'Replace text-decoration-skip: ink to ' +\n            'text-decoration-skip-ink: auto, because spec had been changed',\n          { node: decl }\n        )\n      } else {\n        if (gridPrefixes && this.gridStatus(decl, result)) {\n          if (decl.value === 'subgrid') {\n            result.warn('IE does not support subgrid', { node: decl })\n          }\n          if (/^(align|justify|place)-items$/.test(prop) && insideGrid(decl)) {\n            let fixed = prop.replace('-items', '-self')\n            result.warn(\n              `IE does not support ${prop} on grid containers. ` +\n                `Try using ${fixed} on child elements instead: ` +\n                `${decl.parent.selector} > * { ${fixed}: ${decl.value} }`,\n              { node: decl }\n            )\n          } else if (\n            /^(align|justify|place)-content$/.test(prop) &&\n            insideGrid(decl)\n          ) {\n            result.warn(`IE does not support ${decl.prop} on grid containers`, {\n              node: decl\n            })\n          } else if (prop === 'display' && decl.value === 'contents') {\n            result.warn(\n              'Please do not use display: contents; ' +\n                'if you have grid setting enabled',\n              { node: decl }\n            )\n            return undefined\n          } else if (decl.prop === 'grid-gap') {\n            let status = this.gridStatus(decl, result)\n            if (\n              status === 'autoplace' &&\n              !hasRowsAndColumns(decl) &&\n              !hasGridTemplate(decl)\n            ) {\n              result.warn(\n                'grid-gap only works if grid-template(-areas) is being ' +\n                  'used or both rows and columns have been declared ' +\n                  'and cells have not been manually ' +\n                  'placed inside the explicit grid',\n                { node: decl }\n              )\n            } else if (\n              (status === true || status === 'no-autoplace') &&\n              !hasGridTemplate(decl)\n            ) {\n              result.warn(\n                'grid-gap only works if grid-template(-areas) is being used',\n                { node: decl }\n              )\n            }\n          } else if (prop === 'grid-auto-columns') {\n            result.warn('grid-auto-columns is not supported by IE', {\n              node: decl\n            })\n            return undefined\n          } else if (prop === 'grid-auto-rows') {\n            result.warn('grid-auto-rows is not supported by IE', { node: decl })\n            return undefined\n          } else if (prop === 'grid-auto-flow') {\n            let hasRows = parent.some(i => i.prop === 'grid-template-rows')\n            let hasCols = parent.some(i => i.prop === 'grid-template-columns')\n\n            if (hasGridTemplate(decl)) {\n              result.warn('grid-auto-flow is not supported by IE', {\n                node: decl\n              })\n            } else if (value.includes('dense')) {\n              result.warn('grid-auto-flow: dense is not supported by IE', {\n                node: decl\n              })\n            } else if (!hasRows && !hasCols) {\n              result.warn(\n                'grid-auto-flow works only if grid-template-rows and ' +\n                  'grid-template-columns are present in the same rule',\n                { node: decl }\n              )\n            }\n            return undefined\n          } else if (value.includes('auto-fit')) {\n            result.warn('auto-fit value is not supported by IE', {\n              node: decl,\n              word: 'auto-fit'\n            })\n            return undefined\n          } else if (value.includes('auto-fill')) {\n            result.warn('auto-fill value is not supported by IE', {\n              node: decl,\n              word: 'auto-fill'\n            })\n            return undefined\n          } else if (prop.startsWith('grid-template') && value.includes('[')) {\n            result.warn(\n              'Autoprefixer currently does not support line names. ' +\n                'Try using grid-template-areas instead.',\n              { node: decl, word: '[' }\n            )\n          }\n        }\n        if (value.includes('radial-gradient')) {\n          if (OLD_RADIAL.test(decl.value)) {\n            result.warn(\n              'Gradient has outdated direction syntax. ' +\n                'New syntax is like `closest-side at 0 0` ' +\n                'instead of `0 0, closest-side`.',\n              { node: decl }\n            )\n          } else {\n            let ast = parser(value)\n\n            for (let i of ast.nodes) {\n              if (i.type === 'function' && i.value === 'radial-gradient') {\n                for (let word of i.nodes) {\n                  if (word.type === 'word') {\n                    if (word.value === 'cover') {\n                      result.warn(\n                        'Gradient has outdated direction syntax. ' +\n                          'Replace `cover` to `farthest-corner`.',\n                        { node: decl }\n                      )\n                    } else if (word.value === 'contain') {\n                      result.warn(\n                        'Gradient has outdated direction syntax. ' +\n                          'Replace `contain` to `closest-side`.',\n                        { node: decl }\n                      )\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (value.includes('linear-gradient')) {\n          if (OLD_LINEAR.test(value)) {\n            result.warn(\n              'Gradient has outdated direction syntax. ' +\n                'New syntax is like `to left` instead of `right`.',\n              { node: decl }\n            )\n          }\n        }\n      }\n\n      if (SIZES.includes(decl.prop)) {\n        if (!decl.value.includes('-fill-available')) {\n          if (decl.value.includes('fill-available')) {\n            result.warn(\n              'Replace fill-available to stretch, ' +\n                'because spec had been changed',\n              { node: decl }\n            )\n          } else if (decl.value.includes('fill')) {\n            let ast = parser(value)\n            if (ast.nodes.some(i => i.type === 'word' && i.value === 'fill')) {\n              result.warn(\n                'Replace fill to stretch, because spec had been changed',\n                { node: decl }\n              )\n            }\n          }\n        }\n      }\n\n      let prefixer\n\n      if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n        // Transition\n        return this.prefixes.transition.add(decl, result)\n      } else if (decl.prop === 'align-self') {\n        // align-self flexbox or grid\n        let display = this.displayType(decl)\n        if (display !== 'grid' && this.prefixes.options.flexbox !== false) {\n          prefixer = this.prefixes.add['align-self']\n          if (prefixer && prefixer.prefixes) {\n            prefixer.process(decl)\n          }\n        }\n        if (this.gridStatus(decl, result) !== false) {\n          prefixer = this.prefixes.add['grid-row-align']\n          if (prefixer && prefixer.prefixes) {\n            return prefixer.process(decl, result)\n          }\n        }\n      } else if (decl.prop === 'justify-self') {\n        // justify-self flexbox or grid\n        if (this.gridStatus(decl, result) !== false) {\n          prefixer = this.prefixes.add['grid-column-align']\n          if (prefixer && prefixer.prefixes) {\n            return prefixer.process(decl, result)\n          }\n        }\n      } else if (decl.prop === 'place-self') {\n        prefixer = this.prefixes.add['place-self']\n        if (\n          prefixer &&\n          prefixer.prefixes &&\n          this.gridStatus(decl, result) !== false\n        ) {\n          return prefixer.process(decl, result)\n        }\n      } else {\n        // Properties\n        prefixer = this.prefixes.add[decl.prop]\n        if (prefixer && prefixer.prefixes) {\n          return prefixer.process(decl, result)\n        }\n      }\n\n      return undefined\n    })\n\n    // Insert grid-area prefixes. We need to be able to store the different\n    // rules as a data and hack API is not enough for this\n    if (this.gridStatus(css, result)) {\n      insertAreas(css, this.disabled)\n    }\n\n    // Values\n    return css.walkDecls(decl => {\n      if (this.disabledValue(decl, result)) return\n\n      let unprefixed = this.prefixes.unprefixed(decl.prop)\n      let list = this.prefixes.values('add', unprefixed)\n      if (Array.isArray(list)) {\n        for (let value of list) {\n          if (value.process) value.process(decl, result)\n        }\n      }\n      Value.save(this.prefixes, decl)\n    })\n  }\n\n  /**\n   * Remove unnecessary pefixes\n   */\n  remove(css, result) {\n    // At-rules\n    let resolution = this.prefixes.remove['@resolution']\n\n    css.walkAtRules((rule, i) => {\n      if (this.prefixes.remove[`@${rule.name}`]) {\n        if (!this.disabled(rule, result)) {\n          rule.parent.removeChild(i)\n        }\n      } else if (\n        rule.name === 'media' &&\n        rule.params.includes('-resolution') &&\n        resolution\n      ) {\n        resolution.clean(rule)\n      }\n    })\n\n    // Selectors\n    for (let checker of this.prefixes.remove.selectors) {\n      css.walkRules((rule, i) => {\n        if (checker.check(rule)) {\n          if (!this.disabled(rule, result)) {\n            rule.parent.removeChild(i)\n          }\n        }\n      })\n    }\n\n    return css.walkDecls((decl, i) => {\n      if (this.disabled(decl, result)) return\n\n      let rule = decl.parent\n      let unprefixed = this.prefixes.unprefixed(decl.prop)\n\n      // Transition\n      if (decl.prop === 'transition' || decl.prop === 'transition-property') {\n        this.prefixes.transition.remove(decl)\n      }\n\n      // Properties\n      if (\n        this.prefixes.remove[decl.prop] &&\n        this.prefixes.remove[decl.prop].remove\n      ) {\n        let notHack = this.prefixes.group(decl).down(other => {\n          return this.prefixes.normalize(other.prop) === unprefixed\n        })\n\n        if (unprefixed === 'flex-flow') {\n          notHack = true\n        }\n\n        if (decl.prop === '-webkit-box-orient') {\n          let hacks = { 'flex-direction': true, 'flex-flow': true }\n          if (!decl.parent.some(j => hacks[j.prop])) return\n        }\n\n        if (notHack && !this.withHackValue(decl)) {\n          if (decl.raw('before').includes('\\n')) {\n            this.reduceSpaces(decl)\n          }\n          rule.removeChild(i)\n          return\n        }\n      }\n\n      // Values\n      for (let checker of this.prefixes.values('remove', unprefixed)) {\n        if (!checker.check) continue\n        if (!checker.check(decl.value)) continue\n\n        unprefixed = checker.unprefixed\n        let notHack = this.prefixes.group(decl).down(other => {\n          return other.value.includes(unprefixed)\n        })\n\n        if (notHack) {\n          rule.removeChild(i)\n          return\n        }\n      }\n    })\n  }\n\n  /**\n   * Some rare old values, which is not in standard\n   */\n  withHackValue(decl) {\n    return decl.prop === '-webkit-background-clip' && decl.value === 'text'\n  }\n\n  /**\n   * Check for grid/flexbox options.\n   */\n  disabledValue(node, result) {\n    if (this.gridStatus(node, result) === false && node.type === 'decl') {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n    }\n    if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n    }\n    if (node.type === 'decl' && node.prop === 'content') {\n      return true\n    }\n\n    return this.disabled(node, result)\n  }\n\n  /**\n   * Check for grid/flexbox options.\n   */\n  disabledDecl(node, result) {\n    if (this.gridStatus(node, result) === false && node.type === 'decl') {\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n    if (this.prefixes.options.flexbox === false && node.type === 'decl') {\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return this.disabled(node, result)\n  }\n\n  /**\n   * Check for control comment and global options\n   */\n  disabled(node, result) {\n    if (!node) return false\n\n    if (node._autoprefixerDisabled !== undefined) {\n      return node._autoprefixerDisabled\n    }\n\n    if (node.parent) {\n      let p = node.prev()\n      if (p && p.type === 'comment' && IGNORE_NEXT.test(p.text)) {\n        node._autoprefixerDisabled = true\n        node._autoprefixerSelfDisabled = true\n        return true\n      }\n    }\n\n    let value = null\n    if (node.nodes) {\n      let status\n      node.each(i => {\n        if (i.type !== 'comment') return\n        if (/(!\\s*)?autoprefixer:\\s*(off|on)/i.test(i.text)) {\n          if (typeof status !== 'undefined') {\n            result.warn(\n              'Second Autoprefixer control comment ' +\n                'was ignored. Autoprefixer applies control ' +\n                'comment to whole block, not to next rules.',\n              { node: i }\n            )\n          } else {\n            status = /on/i.test(i.text)\n          }\n        }\n      })\n\n      if (status !== undefined) {\n        value = !status\n      }\n    }\n    if (!node.nodes || value === null) {\n      if (node.parent) {\n        let isParentDisabled = this.disabled(node.parent, result)\n        if (node.parent._autoprefixerSelfDisabled === true) {\n          value = false\n        } else {\n          value = isParentDisabled\n        }\n      } else {\n        value = false\n      }\n    }\n    node._autoprefixerDisabled = value\n    return value\n  }\n\n  /**\n   * Normalize spaces in cascade declaration group\n   */\n  reduceSpaces(decl) {\n    let stop = false\n    this.prefixes.group(decl).up(() => {\n      stop = true\n      return true\n    })\n    if (stop) {\n      return\n    }\n\n    let parts = decl.raw('before').split('\\n')\n    let prevMin = parts[parts.length - 1].length\n    let diff = false\n\n    this.prefixes.group(decl).down(other => {\n      parts = other.raw('before').split('\\n')\n      let last = parts.length - 1\n\n      if (parts[last].length > prevMin) {\n        if (diff === false) {\n          diff = parts[last].length - prevMin\n        }\n\n        parts[last] = parts[last].slice(0, -diff)\n        other.raws.before = parts.join('\\n')\n      }\n    })\n  }\n\n  /**\n   * Is it flebox or grid rule\n   */\n  displayType(decl) {\n    for (let i of decl.parent.nodes) {\n      if (i.prop !== 'display') {\n        continue\n      }\n\n      if (i.value.includes('flex')) {\n        return 'flex'\n      }\n\n      if (i.value.includes('grid')) {\n        return 'grid'\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Set grid option via control comment\n   */\n  gridStatus(node, result) {\n    if (!node) return false\n\n    if (node._autoprefixerGridStatus !== undefined) {\n      return node._autoprefixerGridStatus\n    }\n\n    let value = null\n    if (node.nodes) {\n      let status\n      node.each(i => {\n        if (i.type !== 'comment') return\n        if (GRID_REGEX.test(i.text)) {\n          let hasAutoplace = /:\\s*autoplace/i.test(i.text)\n          let noAutoplace = /no-autoplace/i.test(i.text)\n          if (typeof status !== 'undefined') {\n            result.warn(\n              'Second Autoprefixer grid control comment was ' +\n                'ignored. Autoprefixer applies control comments to the whole ' +\n                'block, not to the next rules.',\n              { node: i }\n            )\n          } else if (hasAutoplace) {\n            status = 'autoplace'\n          } else if (noAutoplace) {\n            status = true\n          } else {\n            status = /on/i.test(i.text)\n          }\n        }\n      })\n\n      if (status !== undefined) {\n        value = status\n      }\n    }\n\n    if (node.type === 'atrule' && node.name === 'supports') {\n      let params = node.params\n      if (params.includes('grid') && params.includes('auto')) {\n        value = false\n      }\n    }\n\n    if (!node.nodes || value === null) {\n      if (node.parent) {\n        let isParentGrid = this.gridStatus(node.parent, result)\n        if (node.parent._autoprefixerSelfDisabled === true) {\n          value = false\n        } else {\n          value = isParentGrid\n        }\n      } else if (typeof this.prefixes.options.grid !== 'undefined') {\n        value = this.prefixes.options.grid\n      } else if (typeof process.env.AUTOPREFIXER_GRID !== 'undefined') {\n        if (process.env.AUTOPREFIXER_GRID === 'autoplace') {\n          value = 'autoplace'\n        } else {\n          value = true\n        }\n      } else {\n        value = false\n      }\n    }\n\n    node._autoprefixerGridStatus = value\n    return value\n  }\n}\n\nmodule.exports = Processor\n","let FractionJs = require('fraction.js')\n\nlet Prefixer = require('./prefixer')\nlet utils = require('./utils')\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio'\n    } else {\n      return prefix + name + '-device-pixel-ratio'\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value)\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96)\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96)\n    }\n    value = value.simplify()\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d\n    }\n    return this.prefixName(prefix, name) + colon + value\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = []\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'))\n        this.bad.push(this.prefixName(prefix, 'max'))\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)))\n    })\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule)\n    let prefixes = parent ? [parent] : this.prefixes\n\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (\n          !query.includes('min-resolution') &&\n          !query.includes('max-resolution')\n        ) {\n          prefixed.push(query)\n          continue\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT)\n            return this.prefixQuery(\n              prefix,\n              parts[1],\n              parts[2],\n              parts[3],\n              parts[4]\n            )\n          })\n          prefixed.push(processed)\n        }\n        prefixed.push(query)\n      }\n\n      return utils.uniq(prefixed)\n    })\n  }\n}\n\nmodule.exports = Resolution\n","let { list } = require('postcss')\n\nlet OldSelector = require('./old-selector')\nlet Prefixer = require('./prefixer')\nlet Browsers = require('./browsers')\nlet utils = require('./utils')\n\nclass Selector extends Prefixer {\n  constructor(name, prefixes, all) {\n    super(name, prefixes, all)\n    this.regexpCache = new Map()\n  }\n\n  /**\n   * Is rule selectors need to be prefixed\n   */\n  check(rule) {\n    if (rule.selector.includes(this.name)) {\n      return !!rule.selector.match(this.regexp())\n    }\n\n    return false\n  }\n\n  /**\n   * Return prefixed version of selector\n   */\n  prefixed(prefix) {\n    return this.name.replace(/^(\\W*)/, `$1${prefix}`)\n  }\n\n  /**\n   * Lazy loadRegExp for name\n   */\n  regexp(prefix) {\n    if (!this.regexpCache.has(prefix)) {\n      let name = prefix ? this.prefixed(prefix) : this.name\n      this.regexpCache.set(\n        prefix,\n        new RegExp(`(^|[^:\"'=])${utils.escapeRegexp(name)}`, 'gi')\n      )\n    }\n\n    return this.regexpCache.get(prefix)\n  }\n\n  /**\n   * All possible prefixes\n   */\n  possible() {\n    return Browsers.prefixes()\n  }\n\n  /**\n   * Return all possible selector prefixes\n   */\n  prefixeds(rule) {\n    if (rule._autoprefixerPrefixeds) {\n      if (rule._autoprefixerPrefixeds[this.name]) {\n        return rule._autoprefixerPrefixeds\n      }\n    } else {\n      rule._autoprefixerPrefixeds = {}\n    }\n\n    let prefixeds = {}\n    if (rule.selector.includes(',')) {\n      let ruleParts = list.comma(rule.selector)\n      let toProcess = ruleParts.filter(el => el.includes(this.name))\n\n      for (let prefix of this.possible()) {\n        prefixeds[prefix] = toProcess\n          .map(el => this.replace(el, prefix))\n          .join(', ')\n      }\n    } else {\n      for (let prefix of this.possible()) {\n        prefixeds[prefix] = this.replace(rule.selector, prefix)\n      }\n    }\n\n    rule._autoprefixerPrefixeds[this.name] = prefixeds\n    return rule._autoprefixerPrefixeds\n  }\n\n  /**\n   * Is rule already prefixed before\n   */\n  already(rule, prefixeds, prefix) {\n    let index = rule.parent.index(rule) - 1\n\n    while (index >= 0) {\n      let before = rule.parent.nodes[index]\n\n      if (before.type !== 'rule') {\n        return false\n      }\n\n      let some = false\n      for (let key in prefixeds[this.name]) {\n        let prefixed = prefixeds[this.name][key]\n        if (before.selector === prefixed) {\n          if (prefix === key) {\n            return true\n          } else {\n            some = true\n            break\n          }\n        }\n      }\n      if (!some) {\n        return false\n      }\n\n      index -= 1\n    }\n\n    return false\n  }\n\n  /**\n   * Replace selectors by prefixed one\n   */\n  replace(selector, prefix) {\n    return selector.replace(this.regexp(), `$1${this.prefixed(prefix)}`)\n  }\n\n  /**\n   * Clone and add prefixes for at-rule\n   */\n  add(rule, prefix) {\n    let prefixeds = this.prefixeds(rule)\n\n    if (this.already(rule, prefixeds, prefix)) {\n      return\n    }\n\n    let cloned = this.clone(rule, { selector: prefixeds[this.name][prefix] })\n    rule.parent.insertBefore(rule, cloned)\n  }\n\n  /**\n   * Return function to fast find prefixed selector\n   */\n  old(prefix) {\n    return new OldSelector(this, prefix)\n  }\n}\n\nmodule.exports = Selector\n","let featureQueries = require('caniuse-lite/data/features/css-featurequeries.js')\nlet { feature } = require('caniuse-lite')\nlet { parse } = require('postcss')\n\nlet Browsers = require('./browsers')\nlet brackets = require('./brackets')\nlet Value = require('./value')\nlet utils = require('./utils')\n\nlet data = feature(featureQueries)\n\nlet supported = []\nfor (let browser in data.stats) {\n  let versions = data.stats[browser]\n  for (let version in versions) {\n    let support = versions[version]\n    if (/y/.test(support)) {\n      supported.push(browser + ' ' + version)\n    }\n  }\n}\n\nclass Supports {\n  constructor(Prefixes, all) {\n    this.Prefixes = Prefixes\n    this.all = all\n  }\n\n  /**\n   * Return prefixer only with @supports supported browsers\n   */\n  prefixer() {\n    if (this.prefixerCache) {\n      return this.prefixerCache\n    }\n\n    let filtered = this.all.browsers.selected.filter(i => {\n      return supported.includes(i)\n    })\n\n    let browsers = new Browsers(\n      this.all.browsers.data,\n      filtered,\n      this.all.options\n    )\n    this.prefixerCache = new this.Prefixes(\n      this.all.data,\n      browsers,\n      this.all.options\n    )\n    return this.prefixerCache\n  }\n\n  /**\n   * Parse string into declaration property and value\n   */\n  parse(str) {\n    let parts = str.split(':')\n    let prop = parts[0]\n    let value = parts[1]\n    if (!value) value = ''\n    return [prop.trim(), value.trim()]\n  }\n\n  /**\n   * Create virtual rule to process it by prefixer\n   */\n  virtual(str) {\n    let [prop, value] = this.parse(str)\n    let rule = parse('a{}').first\n    rule.append({ prop, value, raws: { before: '' } })\n    return rule\n  }\n\n  /**\n   * Return array of Declaration with all necessary prefixes\n   */\n  prefixed(str) {\n    let rule = this.virtual(str)\n    if (this.disabled(rule.first)) {\n      return rule.nodes\n    }\n\n    let result = { warn: () => null }\n\n    let prefixer = this.prefixer().add[rule.first.prop]\n    prefixer && prefixer.process && prefixer.process(rule.first, result)\n\n    for (let decl of rule.nodes) {\n      for (let value of this.prefixer().values('add', rule.first.prop)) {\n        value.process(decl)\n      }\n      Value.save(this.all, decl)\n    }\n\n    return rule.nodes\n  }\n\n  /**\n   * Return true if brackets node is \"not\" word\n   */\n  isNot(node) {\n    return typeof node === 'string' && /not\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is \"or\" word\n   */\n  isOr(node) {\n    return typeof node === 'string' && /\\s*or\\s*/i.test(node)\n  }\n\n  /**\n   * Return true if brackets node is (prop: value)\n   */\n  isProp(node) {\n    return (\n      typeof node === 'object' &&\n      node.length === 1 &&\n      typeof node[0] === 'string'\n    )\n  }\n\n  /**\n   * Return true if prefixed property has no unprefixed\n   */\n  isHack(all, unprefixed) {\n    let check = new RegExp(`(\\\\(|\\\\s)${utils.escapeRegexp(unprefixed)}:`)\n    return !check.test(all)\n  }\n\n  /**\n   * Return true if we need to remove node\n   */\n  toRemove(str, all) {\n    let [prop, value] = this.parse(str)\n    let unprefixed = this.all.unprefixed(prop)\n\n    let cleaner = this.all.cleaner()\n\n    if (\n      cleaner.remove[prop] &&\n      cleaner.remove[prop].remove &&\n      !this.isHack(all, unprefixed)\n    ) {\n      return true\n    }\n\n    for (let checker of cleaner.values('remove', unprefixed)) {\n      if (checker.check(value)) {\n        return true\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Remove all unnecessary prefixes\n   */\n  remove(nodes, all) {\n    let i = 0\n    while (i < nodes.length) {\n      if (\n        !this.isNot(nodes[i - 1]) &&\n        this.isProp(nodes[i]) &&\n        this.isOr(nodes[i + 1])\n      ) {\n        if (this.toRemove(nodes[i][0], all)) {\n          nodes.splice(i, 2)\n          continue\n        }\n\n        i += 2\n        continue\n      }\n\n      if (typeof nodes[i] === 'object') {\n        nodes[i] = this.remove(nodes[i], all)\n      }\n\n      i += 1\n    }\n    return nodes\n  }\n\n  /**\n   * Clean brackets with one child\n   */\n  cleanBrackets(nodes) {\n    return nodes.map(i => {\n      if (typeof i !== 'object') {\n        return i\n      }\n\n      if (i.length === 1 && typeof i[0] === 'object') {\n        return this.cleanBrackets(i[0])\n      }\n\n      return this.cleanBrackets(i)\n    })\n  }\n\n  /**\n   * Add \" or \" between properties and convert it to brackets format\n   */\n  convert(progress) {\n    let result = ['']\n    for (let i of progress) {\n      result.push([`${i.prop}: ${i.value}`])\n      result.push(' or ')\n    }\n    result[result.length - 1] = ''\n    return result\n  }\n\n  /**\n   * Compress value functions into a string nodes\n   */\n  normalize(nodes) {\n    if (typeof nodes !== 'object') {\n      return nodes\n    }\n\n    nodes = nodes.filter(i => i !== '')\n\n    if (typeof nodes[0] === 'string') {\n      let firstNode = nodes[0].trim()\n\n      if (\n        firstNode.includes(':') ||\n        firstNode === 'selector' ||\n        firstNode === 'not selector'\n      ) {\n        return [brackets.stringify(nodes)]\n      }\n    }\n    return nodes.map(i => this.normalize(i))\n  }\n\n  /**\n   * Add prefixes\n   */\n  add(nodes, all) {\n    return nodes.map(i => {\n      if (this.isProp(i)) {\n        let prefixed = this.prefixed(i[0])\n        if (prefixed.length > 1) {\n          return this.convert(prefixed)\n        }\n\n        return i\n      }\n\n      if (typeof i === 'object') {\n        return this.add(i, all)\n      }\n\n      return i\n    })\n  }\n\n  /**\n   * Add prefixed declaration\n   */\n  process(rule) {\n    let ast = brackets.parse(rule.params)\n    ast = this.normalize(ast)\n    ast = this.remove(ast, rule.params)\n    ast = this.add(ast, rule.params)\n    ast = this.cleanBrackets(ast)\n    rule.params = brackets.stringify(ast)\n  }\n\n  /**\n   * Check global options\n   */\n  disabled(node) {\n    if (!this.all.options.grid) {\n      if (node.prop === 'display' && node.value.includes('grid')) {\n        return true\n      }\n      if (node.prop.includes('grid') || node.prop === 'justify-items') {\n        return true\n      }\n    }\n\n    if (this.all.options.flexbox === false) {\n      if (node.prop === 'display' && node.value.includes('flex')) {\n        return true\n      }\n      let other = ['order', 'justify-content', 'align-items', 'align-content']\n      if (node.prop.includes('flex') || other.includes(node.prop)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Supports\n","let { list } = require('postcss')\nlet parser = require('postcss-value-parser')\n\nlet Browsers = require('./browsers')\nlet vendor = require('./vendor')\n\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property']\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n  add(decl, result) {\n    let prefix, prop\n    let add = this.prefixes.add[decl.prop]\n    let vendorPrefixes = this.ruleVendorPrefixes(decl)\n    let declPrefixes = vendorPrefixes || (add && add.prefixes) || []\n\n    let params = this.parse(decl.value)\n    let names = params.map(i => this.findProp(i))\n    let added = []\n\n    if (names.some(i => i[0] === '-')) {\n      return\n    }\n\n    for (let param of params) {\n      prop = this.findProp(param)\n      if (prop[0] === '-') continue\n\n      let prefixer = this.prefixes.add[prop]\n      if (!prefixer || !prefixer.prefixes) continue\n\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue\n        }\n\n        let prefixed = this.prefixes.prefixed(prop, prefix)\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param))\n          }\n        }\n      }\n    }\n\n    params = params.concat(added)\n    let value = this.stringify(params)\n\n    let webkitClean = this.stringify(\n      this.cleanFromUnprefixed(params, '-webkit-')\n    )\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean)\n    }\n    this.cloneBefore(decl, decl.prop, webkitClean)\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'))\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean)\n    }\n\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(\n          this.cleanOtherPrefixes(params, prefix)\n        )\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue)\n      }\n    }\n\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl)\n      decl.cloneBefore()\n      decl.value = value\n    }\n  }\n\n  /**\n   * Find property name\n   */\n  findProp(param) {\n    let prop = param[0].value\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value\n        }\n      }\n    }\n    return prop\n  }\n\n  /**\n   * Does we already have this declaration\n   */\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value)\n  }\n\n  /**\n   * Add declaration if it is not exist\n   */\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({ prop, value })\n    }\n  }\n\n  /**\n   * Show transition-property warning\n   */\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return\n    }\n\n    let isPrefixed = false\n    let hasAssociatedProp = false\n\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined\n      }\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined\n      }\n      let values = list.comma(i.value)\n      // check if current Rule's transition-property comma separated value list needs prefixes\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value]\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true\n          }\n        })\n        return undefined\n      }\n      // check if another transition-* prop in current Rule has comma separated value list\n      hasAssociatedProp = hasAssociatedProp || values.length > 1\n      return false\n    })\n\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(\n        result,\n        'Replace transition-property to transition, ' +\n          'because Autoprefixer could not support ' +\n          'any cases of transition-property ' +\n          'and other transition-*'\n      )\n    }\n  }\n\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n  remove(decl) {\n    let params = this.parse(decl.value)\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)]\n      return !prop || !prop.remove\n    })\n    let value = this.stringify(params)\n\n    if (decl.value === value) {\n      return\n    }\n\n    if (params.length === 0) {\n      decl.remove()\n      return\n    }\n\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value\n    })\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length\n    })\n\n    if (double || smaller) {\n      decl.remove()\n      return\n    }\n\n    decl.value = value\n  }\n\n  /**\n   * Parse properties list to array\n   */\n  parse(value) {\n    let ast = parser(value)\n    let result = []\n    let param = []\n    for (let node of ast.nodes) {\n      param.push(node)\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param)\n        param = []\n      }\n    }\n    result.push(param)\n    return result.filter(i => i.length > 0)\n  }\n\n  /**\n   * Return properties string from array\n   */\n  stringify(params) {\n    if (params.length === 0) {\n      return ''\n    }\n    let nodes = []\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params))\n      }\n      nodes = nodes.concat(param)\n    }\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1)\n    }\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined)\n    }\n    return parser.stringify({ nodes })\n  }\n\n  /**\n   * Return new param array with different name\n   */\n  clone(origin, name, param) {\n    let result = []\n    let changed = false\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({ type: 'word', value: name })\n        changed = true\n      } else {\n        result.push(i)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Find or create separator\n   */\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node\n        }\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param))\n      return current === '' || current === prefix\n    })\n  }\n\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params\n      .map(i => this.findProp(i))\n      .filter(i => i.slice(0, prefix.length) === prefix)\n      .map(i => this.prefixes.unprefixed(i))\n\n    let result = []\n    for (let param of params) {\n      let prop = this.findProp(param)\n      let p = vendor.prefix(prop)\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Check property for disabled by option\n   */\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content']\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true\n      }\n\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009')\n      }\n    }\n    return undefined\n  }\n\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n  ruleVendorPrefixes(decl) {\n    let { parent } = decl\n\n    if (parent.type !== 'rule') {\n      return false\n    } else if (!parent.selector.includes(':-')) {\n      return false\n    }\n\n    let selectors = Browsers.prefixes().filter(s =>\n      parent.selector.includes(':' + s)\n    )\n\n    return selectors.length > 0 ? selectors : false\n  }\n}\n\nmodule.exports = Transition\n","let { list } = require('postcss')\n\n/**\n * Throw special error, to tell beniary,\n * that this error is from Autoprefixer.\n */\nmodule.exports.error = function (text) {\n  let err = new Error(text)\n  err.autoprefixer = true\n  throw err\n}\n\n/**\n * Return array, that doesn’t contain duplicates.\n */\nmodule.exports.uniq = function (array) {\n  return [...new Set(array)]\n}\n\n/**\n * Return \"-webkit-\" on \"-webkit- old\"\n */\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string\n  }\n\n  return string.split(' ')[0]\n}\n\n/**\n * Escape RegExp symbols\n */\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&')\n}\n\n/**\n * Return regexp to check, that CSS string contain word\n */\nmodule.exports.regexp = function (word, escape = true) {\n  if (escape) {\n    word = this.escapeRegexp(word)\n  }\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi')\n}\n\n/**\n * Change comma list\n */\nmodule.exports.editList = function (value, callback) {\n  let origin = list.comma(value)\n  let changed = callback(origin, [])\n\n  if (origin === changed) {\n    return value\n  }\n\n  let join = value.match(/,\\s*/)\n  join = join ? join[0] : ', '\n  return changed.join(join)\n}\n\n/**\n * Split the selector into parts.\n * It returns 3 level deep array because selectors can be comma\n * separated (1), space separated (2), and combined (3)\n * @param {String} selector selector string\n * @return {Array<Array<Array>>} 3 level deep array of split selector\n * @see utils.test.js for examples\n */\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(i => {\n    return list.space(i).map(k => {\n      return k.split(/(?=\\.|#)/g)\n    })\n  })\n}\n\n/**\n * Return true if a given value only contains numbers.\n * @param {*} value\n * @returns {boolean}\n */\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true\n  }\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value)\n  }\n  return false\n}\n","let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n}\n\nmodule.exports = Value\n","module.exports = {\n  prefix(prop) {\n    let match = prop.match(/^(-\\w+-)/)\n    if (match) {\n      return match[0]\n    }\n\n    return ''\n  },\n\n  unprefixed(prop) {\n    return prop.replace(/^-\\w+-/, '')\n  }\n}\n"],"names":["browserslist","NAMES","ie","ie_mob","ios_saf","op_mini","op_mob","and_chr","and_ff","and_uc","and_qq","kaios","baidu","samsung","prefix","name","prefixes","note","out","map","i","replace","join","module","exports","browsers","selected","length","versions","browser","parts","split","version","str","slice","toUpperCase","push","list","sort","a","b","parseFloat","coverage","Math","round","atrules","add","data","selectors","selector","values","props","hadGrid","grid","indexOf","Array","isArray","value","includes","string","constructor","this","prefixed","regexp","prefixeds","possible","x","unprefixed","nameRegexp","isHack","rule","index","parent","rules","nodes","before","match","some","check","utils","Browsers","vendor","clone","obj","cloned","Object","keys","Prefixer","static","klass","hacks","names","all","Klass","node","overrides","parentPrefix","_autoprefixerPrefix","type","prop","test","process","result","filter","removeNote","added","concat","Declaration","Resolution","Transition","Processor","Supports","Selector","AtRule","Value","hackFullscreen","hackPlaceholder","hackPlaceholderShown","hackFileSelectorButton","hackFlex","hackOrder","hackFilter","hackGridEnd","hackAnimation","hackFlexFlow","hackFlexGrow","hackFlexWrap","hackGridArea","hackPlaceSelf","hackGridStart","hackAlignSelf","hackAppearance","hackFlexBasis","hackMaskBorder","hackMaskComposite","hackAlignItems","hackUserSelect","hackFlexShrink","hackBreakProps","hackWritingMode","hackBorderImage","hackAlignContent","hackBorderRadius","hackBlockLogical","hackGridTemplate","hackInlineLogical","hackGridRowAlign","hackTransformDecl","hackFlexDirection","hackImageRendering","hackBackdropFilter","hackBackgroundClip","hackTextDecoration","hackJustifyContent","hackBackgroundSize","hackGridRowColumn","hackGridRowsColumns","hackGridColumnAlign","hackPrintColorAdjust","hackOverscrollBehavior","hackGridTemplateAreas","hackTextEmphasisPosition","hackTextDecorationSkipInk","hackGradient","hackIntrinsic","hackPixelated","hackImageSet","hackCrossFade","hackDisplayFlex","hackDisplayGrid","hackFilterValue","hackAutofill","hack","declsCache","Map","Prefixes","options","remove","preprocess","select","transition","processor","cleaner","cleanerCache","empty","params","notes","uniq","isSelected","flexbox","mistakes","aLength","bLength","load","old","p","olds","decl","has","set","get","normalize","global","group","checker","step","callback","other","withPrefix","up","down","parser","insertAreas","OLD_LINEAR","OLD_RADIAL","IGNORE_NEXT","GRID_REGEX","SIZES","hasGridTemplate","css","resolution","keyframes","viewport","supports","insideGrid","displayGrid","gridTemplate","startsWith","gridGap","walkAtRules","disabled","undefined","walkRules","gridPrefixes","gridStatus","walkDecls","disabledDecl","prefixer","every","warn","insideFlex","fixed","status","hasRows","hasColumns","hasRowsAndColumns","hasCols","word","ast","displayType","disabledValue","save","removeChild","clean","notHack","j","withHackValue","raw","reduceSpaces","_autoprefixerDisabled","prev","text","_autoprefixerSelfDisabled","each","isParentDisabled","stop","prevMin","diff","last","raws","_autoprefixerGridStatus","hasAutoplace","noAutoplace","isParentGrid","env","AUTOPREFIXER_GRID","FractionJs","REGEXP","SPLIT","prefixName","prefixQuery","colon","units","div","mul","simplify","n","d","bad","editList","queries","query","origin","processed","OldSelector","super","regexpCache","RegExp","escapeRegexp","_autoprefixerPrefixeds","toProcess","comma","el","already","key","insertBefore","featureQueries","feature","parse","brackets","supported","stats","support","prefixerCache","filtered","trim","virtual","first","append","isNot","isOr","isProp","toRemove","splice","cleanBrackets","convert","progress","firstNode","stringify","vendorPrefixes","ruleVendorPrefixes","declPrefixes","findProp","param","webkitClean","cleanFromUnprefixed","cloneBefore","operaClean","prefixValue","cleanOtherPrefixes","checkForWarning","token","entries","isPrefixed","hasAssociatedProp","forEach","lookup","double","smaller","changed","after","current","s","error","err","Error","autoprefixer","array","Set","escape","splitSelector","space","k","isPureNumber","OldValue","_autoprefixerValues","item","propPrefix","trimmed"],"sourceRoot":""}