{"version":3,"file":"app~46da9bec.bundle.js","mappings":"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","sources":["webpack://movies-detail-app/./src/script/pages/Detail.js","webpack://movies-detail-app/./src/script/pages/Expand.js","webpack://movies-detail-app/./src/script/pages/Home.js","webpack://movies-detail-app/./src/script/pages/Latest.js"],"sourcesContent":["import { detailMovieOrTvTemplate, detailPerson, seasonTemplate } from '../../templates/templateCreator';\nimport MoviesDB from '../data/MoviesDB';\nimport urlParse from '../routes/urlParse';\nimport getData from '../utility/dataGetter';\n\nconst Detail = {\n  render() {\n    const url = urlParse.parseUrlWithoutCombiner();\n    if (url.season) {\n      return `\n        <div class=\"container-content\">\n          <div class=\"content\"></div>\n        </div>\n        <aside>\n          <suggestion-tag id=\"for-you\" class=\"recommendation\"></suggestion-tag>\n        </aside>\n      `;\n    }\n    if (url.pages === 'person') {\n      return `\n        <div class=\"container-content\">\n          <div class=\"content\">\n          </div>\n          <list-tag id=\"movies-by-this-actor\" class=\"movies-actor\"></list-tag>\n          <list-tag id=\"tv-show-by-this-actor\" class=\"tv-actor\"></list-tag>\n        </div>\n        <aside>\n            <suggestion-tag id=\"trending-tv-show\" class=\"recommendation\"></suggestion-tag>\n        </aside>\n    `;\n    }\n    return `\n        <div class=\"container-content\">\n          <div class=\"content\">\n          </div>\n          <list-tag id=\"similar\"></list-tag>\n        </div>\n        <aside>\n            <suggestion-tag id=\"for-you\" class=\"recommendation\"></suggestion-tag>\n        </aside>\n    `;\n  },\n\n  async afterRender() {\n    const container = document.querySelector('.content');\n    const recommendationContainer = document.querySelector('.recommendation');\n    const similarContainer = document.querySelector('#similar');\n    const moviesActorContainer = document.querySelector('.movies-actor');\n    const tvActorContainer = document.querySelector('.tv-actor');\n    const url = urlParse.parseUrlWithoutCombiner();\n\n    if (url.pages === 'person') {\n      const dataPerson = await MoviesDB.DetailActor(url.id);\n\n      container.innerHTML = detailPerson(dataPerson);\n      getData(moviesActorContainer, MoviesDB.MoviesOrTvByActor(url.id));\n      getData(tvActorContainer, MoviesDB.MoviesOrTvByActor(url.id, 'tv'));\n      // console.log(dataPerson);\n      return;\n    }\n\n    if (url.idSeason) {\n      // console.log(await MoviesDB.SeasonDetail(url.id, url.idSeason));\n      const data = await MoviesDB.SeasonDetail(url.id, url.idSeason);\n      // const recommendationData = await MoviesDB.Recommendation(url.id, 'tv');\n      container.innerHTML = seasonTemplate(data);\n      getData(recommendationContainer, MoviesDB.Recommendation(url.id, 'tv'));\n      console.log(data);\n      return;\n    }\n\n    const data = await MoviesDB.Detail(url.id, url.pages);\n    const trailers = await MoviesDB.Trailer(url.id, url.pages);\n    const cast = await MoviesDB.CreditMovieOrTv(url.id, url.pages);\n    // console.log(data);\n    container.innerHTML = detailMovieOrTvTemplate(data, cast, trailers);\n    getData(recommendationContainer, MoviesDB.Recommendation(url.id, url.pages));\n    getData(similarContainer, MoviesDB.Similar(url.id, url.pages));\n  },\n};\n\nexport default Detail;\n","/* eslint-disable no-param-reassign */\nimport MoviesDB from '../data/MoviesDB';\nimport urlParse from '../routes/urlParse';\nimport getData from '../utility/dataGetter';\nimport pagination from '../utility/pagination';\n\nconst Genre = {\n  render() {\n    const url = urlParse.parseUrlWithoutCombiner();\n    if (url.pages === 'on-air') {\n      return `\n        <div class=\"container-content\">\n            <list-tag id=\"all-on-air-tv-show\" class=\"on-air\"></list-tag>\n        </div>\n        <aside>\n          <suggestion-tag id=\"now-playing-movies\" class=\"now-playing\"></suggestion-tag>\n        </aside>\n      `;\n    }\n    if (url.pages === 'top-rated-tv') {\n      return `\n        <div class=\"container-content\">\n            <list-tag id=\"all-top-rated-tv-show\" class=\"top-rated\"></list-tag>\n        </div>\n        <aside>\n          <suggestion-tag id=\"top-rated-movies\" class=\"top-rated-movies\"></suggestion-tag>\n        </aside>\n      `;\n    }\n    if (url.pages === 'popular-tv-show') {\n      return `\n        <div class=\"container-content\">\n            <list-tag id=\"all-popular-tv-show\" class=\"popular-tv\"></list-tag>\n        </div>\n        <aside>\n          <suggestion-tag id=\"popular-movies\" class=\"popular-movies\"></suggestion-tag>\n        </aside>\n      `;\n    }\n    return `\n        <div class=\"container-content\">\n            <list-tag id=\"genre-tag\" class=\"genre\"></list-tag>\n        </div> \n        <aside>\n          <suggestion-tag id=\"trending-movies\" class=\"trending-movies\"></suggestion-tag>\n        </aside>\n    `;\n  },\n\n  async afterRender() {\n    const url = urlParse.parseUrlWithoutCombiner();\n\n    if (url.pages === 'on-air') {\n      const onAirContainer = document.querySelector('.on-air');\n      const nowPlayingContainer = document.querySelector('.now-playing');\n      await getData(onAirContainer, MoviesDB.TvOnAir());\n      await getData(nowPlayingContainer, MoviesDB.MoviesNowPlaying());\n      pagination(onAirContainer);\n      return;\n    }\n\n    if (url.pages === 'top-rated-tv') {\n      const topRatedContainer = document.querySelector('.top-rated');\n      const topRatedMoviesContainer = document.querySelector('.top-rated-movies');\n      await getData(topRatedContainer, MoviesDB.TopRated('1', 'tv'));\n      await getData(topRatedMoviesContainer, MoviesDB.TopRated());\n      pagination(topRatedContainer);\n      return;\n    }\n\n    if (url.pages === 'popular-tv-show') {\n      const popularTvContainer = document.querySelector('.popular-tv');\n      const popularMovieContainer = document.querySelector('.popular-movies');\n      await getData(popularTvContainer, MoviesDB.PopularMovieOrTv('1', 'tv'));\n      await getData(popularMovieContainer, MoviesDB.PopularMovieOrTv());\n      pagination(popularTvContainer);\n      return;\n    }\n\n    const title = await MoviesDB.spesificGenre(url.id);\n    document.querySelector('.genre').setAttribute('id', title);\n    const genreContainer = document.querySelector('.genre');\n    const trendingContainer = document.querySelector('.trending-movies');\n    await getData(genreContainer, MoviesDB.MovieOrTvByGenre(url.id));\n    await getData(trendingContainer, MoviesDB.Trending());\n    pagination(genreContainer, url.id);\n  },\n};\n\nexport default Genre;\n","/* eslint-disable no-param-reassign */\nimport MoviesDB from '../data/MoviesDB';\nimport '../../components/Slider';\nimport '../../components/List';\nimport '../../components/Trailler';\nimport '../../components/Genre';\nimport getData from '../utility/dataGetter';\nimport pagination from '../utility/pagination';\n\nconst Home = {\n  async render() {\n    return `\n            <div class=\"container-content\">\n              <slider-tag id=\"slider\"></slider-tag>\n              <genre-tag id=\"genre\"></genre-tag>\n              <list-tag id=\"upcomming-movies\" class=\"upcomming\"></list-tag>\n              <list-tag id=\"popular-actor\"></list-tag>\n              <list-tag id=\"now-playing-movies\" class=\"now-playing\"></list-tag>\n              <list-tag id=\"top-rated-movies\" class=\"top-rated\"></list-tag>\n            </div>\n            <aside class=\"\">\n              <suggestion-tag id=\"trending-tv-show\" class=\"trending-tv\"></suggestion-tag>\n            </aside>\n          `;\n  },\n\n  async afterRender() {\n    const sliderTag = document.querySelector('slider-tag');\n    const genreTag = document.querySelector('#genre');\n    const upcomming = document.querySelector('.upcomming');\n    const popularActor = document.querySelector('#popular-actor');\n    const nowPlaying = document.querySelector('.now-playing');\n    const trendingTvContainer = document.querySelector('.trending-tv');\n    const topRatedContainer = document.querySelector('.top-rated');\n\n    await getData(sliderTag, MoviesDB.Trending());\n    await getData(trendingTvContainer, MoviesDB.Trending('1', 'tv'));\n    await getData(genreTag, MoviesDB.Genre());\n    await getData(upcomming, MoviesDB.Upcomming());\n    await getData(popularActor, MoviesDB.Actor());\n    await getData(nowPlaying, MoviesDB.MoviesNowPlaying());\n    await getData(topRatedContainer, MoviesDB.TopRated());\n\n    // console.log(await MoviesDB.Genre());\n    // genreTag.value = await MoviesDB.genre();\n\n    pagination(nowPlaying);\n  },\n};\n\nexport default Home;\n","const Latest = {\n\n};\n\nexport default Latest;\n"],"names":["i","render","url","urlParse","season","pages","afterRender","container","document","querySelector","recommendationContainer","similarContainer","moviesActorContainer","tvActorContainer","MoviesDB","id","dataPerson","innerHTML","detailPerson","getData","idSeason","data","seasonTemplate","console","log","trailers","cast","detailMovieOrTvTemplate","onAirContainer","nowPlayingContainer","pagination","topRatedContainer","topRatedMoviesContainer","popularTvContainer","popularMovieContainer","title","setAttribute","genreContainer","trendingContainer","sliderTag","genreTag","upcomming","popularActor","nowPlaying","trendingTvContainer"],"sourceRoot":""}